@page "/project/{id:int}/beta"

@using ReleaseMonkeyWeb.Models
@using Blazored.LocalStorage
@using Services

@inject NavigationManager navigationManager
@inject ApiService apiService
@inject ILocalStorageService localStorage
@inject LocalPreferencesServices preferencesServices
@inject IJSRuntime jsRuntime

@rendermode InteractiveServer

<PageTitle>Beta Sign up</PageTitle>

<main class="flex flex-col items-center h-screen m-4">
    @if (Project == null)
    {
        <div class="lds-facebook"><div></div><div></div><div></div></div>
    }
    else
    {
        <h1 class="text-4xl">@Project.Name Beta Testing</h1>
        <section class="flex flex-col items-center justify-center gap-y-4 h-screen">
            <p class="text-lg">Sign up as a beta tester for this project. You will get notified when new releases are made.</p>
            <button class="rounded py-2 px-4 bg-blue-600 text-white" @onclick="OnSignUp" >Sign Up</button>
        </section>
    }
</main>

@code
{
    [Parameter] public int Id { get; set; }
    public PublicProject? Project { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            apiService.ConfigureEnv(navigationManager.Uri);
            await apiService.SetStorage();

            try
            {
                Project = await apiService.GetPublicProject(Id.ToString());
                StateHasChanged();
            }
            catch (ApiException e)
            {
                await jsRuntime.InvokeVoidAsync("alert", e.Message);
            }
        }
    }

    public async Task OnSignUp()
    {
        var user = await preferencesServices.GetUser();
        if(user == null)
        {
           var confirmLogin = await jsRuntime.InvokeAsync<bool>("confirm", "Please sign in with your github account before you join this project.");
            if(confirmLogin)
            {
                navigationManager.NavigateTo($"/login?next={navigationManager.Uri}");
            }
        }
        else
        {
            var tmp = Project;

            try
            {
                var projectId = Project!.Id;
                Project = null;
                StateHasChanged();

                await apiService.AddBetaTester(projectId);
                navigationManager.NavigateTo("/");
            }
            catch(ApiException e)
            {
                await jsRuntime.InvokeVoidAsync("alert", e.Message);
                
                Project = tmp;
            }
        }
    }
}
